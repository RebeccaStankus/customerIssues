import { OrientationQuat3D, Point3D, OrientationEuler3DOrder } from "./HiFiAudioAPIData";
export declare enum HiFiAxes {
    PositiveX = "Positive X",
    NegativeX = "Negative X",
    PositiveY = "Positive Y",
    NegativeY = "Negative Y",
    PositiveZ = "Positive Z",
    NegativeZ = "Negative Z"
}
export declare enum HiFiHandedness {
    RightHand = "Right Hand",
    LeftHand = "Left Hand"
}
export declare class HiFiAxisConfiguration {
    rightAxis: HiFiAxes;
    leftAxis: HiFiAxes;
    intoScreenAxis: HiFiAxes;
    outOfScreenAxis: HiFiAxes;
    upAxis: HiFiAxes;
    downAxis: HiFiAxes;
    handedness: HiFiHandedness;
    eulerOrder: OrientationEuler3DOrder;
    constructor({ rightAxis, leftAxis, intoScreenAxis, outOfScreenAxis, upAxis, downAxis, handedness, eulerOrder }: {
        rightAxis: HiFiAxes;
        leftAxis: HiFiAxes;
        intoScreenAxis: HiFiAxes;
        outOfScreenAxis: HiFiAxes;
        upAxis: HiFiAxes;
        downAxis: HiFiAxes;
        handedness: HiFiHandedness;
        eulerOrder: OrientationEuler3DOrder;
    });
}
export declare let ourHiFiAxisConfiguration: HiFiAxisConfiguration;
export declare class HiFiAxisUtilities {
    static verify(axisConfiguration: HiFiAxisConfiguration): boolean;
    static translatePoint3DToMixerSpace(axisConfiguration: HiFiAxisConfiguration, inputPoint3D: Point3D): Point3D;
    static translatePoint3DFromMixerSpace(axisConfiguration: HiFiAxisConfiguration, mixerPoint3D: Point3D): Point3D;
    static translateOrientationQuat3DToMixerSpace(axisConfiguration: HiFiAxisConfiguration, inputOrientationQuat3D: OrientationQuat3D): OrientationQuat3D;
    static translateOrientationQuat3DFromMixerSpace(axisConfiguration: HiFiAxisConfiguration, mixerOrientationQuat3D: OrientationQuat3D): OrientationQuat3D;
}
