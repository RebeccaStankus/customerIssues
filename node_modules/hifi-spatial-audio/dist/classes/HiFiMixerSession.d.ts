import { HiFiAudioAPIData } from "./HiFiAudioAPIData";
import { HiFiConnectionStates, HiFiUserDataStreamingScopes } from "./HiFiCommunicator";
import { WebRTCSessionParams } from "../libravi/RaviSession";
interface AudionetSetOtherUserGainsForThisConnectionResponse {
    success: boolean;
    reason?: string;
}
export interface SetOtherUserGainsForThisConnectionResponse {
    success: boolean;
    error?: string;
    audionetSetOtherUserGainsForThisConnectionResponse?: AudionetSetOtherUserGainsForThisConnectionResponse;
}
export declare type SetOtherUserGainForThisConnectionResponse = SetOtherUserGainsForThisConnectionResponse;
export declare class HiFiMixerSession {
    private _raviSignalingConnection;
    private _raviSession;
    private _currentHiFiConnectionState;
    private _cachedMediaTrackConstraints;
    private _mixerPeerKeyToStateCacheDict;
    private _inputAudioMediaStreamIsStereo;
    private _statsObserverCallback;
    userDataStreamingScope: HiFiUserDataStreamingScopes;
    webRTCAddress: string;
    onUserDataUpdated: Function;
    onUsersDisconnected: Function;
    onConnectionStateChanged: Function;
    mixerInfo: any;
    constructor({ userDataStreamingScope, onUserDataUpdated, onUsersDisconnected, onConnectionStateChanged }: {
        userDataStreamingScope?: HiFiUserDataStreamingScopes;
        onUserDataUpdated?: Function;
        onUsersDisconnected?: Function;
        onConnectionStateChanged?: Function;
    });
    promiseToRunAudioInit(): Promise<any>;
    handleRAVISessionBinaryData(data: any): void;
    connectToHiFiMixer(count: number, { webRTCSessionParams }: {
        webRTCSessionParams?: WebRTCSessionParams;
    }): Promise<any>;
    disconnectFromHiFiMixer(): Promise<string>;
    setRAVIInputAudio(inputAudioMediaStream: MediaStream, isStereo?: boolean): Promise<boolean>;
    setInputAudioMuted(newMutedValue: boolean, tryToStopMicStream?: boolean): Promise<boolean>;
    getOutputAudioMediaStream(): MediaStream;
    _setCurrentHiFiConnectionState(state: HiFiConnectionStates): void;
    onRAVISignalingStateChanged(event: any): void;
    onRAVISessionStateChanged(event: any): void;
    startCollectingWebRTCStats(callback: Function): void;
    stopCollectingWebRTCStats(): void;
    _transmitHiFiAudioAPIDataToServer(currentHifiAudioAPIData: HiFiAudioAPIData, previousHifiAudioAPIData?: HiFiAudioAPIData): any;
    private _resetMixerInfo;
}
export {};
