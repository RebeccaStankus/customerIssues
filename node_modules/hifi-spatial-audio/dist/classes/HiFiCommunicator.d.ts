import { WebRTCSessionParams } from "../libravi/RaviSession";
import { HiFiAudioAPIData, OtherUserGainMap } from "./HiFiAudioAPIData";
import { HiFiAxisConfiguration } from "./HiFiAxisConfiguration";
import { SetOtherUserGainForThisConnectionResponse, SetOtherUserGainsForThisConnectionResponse } from "./HiFiMixerSession";
import { UserDataSubscription } from "./HiFiUserDataSubscription";
export declare enum HiFiConnectionStates {
    Connected = "Connected",
    Disconnected = "Disconnected",
    Failed = "Failed",
    Unavailable = "Unavailable"
}
export declare enum HiFiUserDataStreamingScopes {
    None = "none",
    Peers = "peers",
    All = "all"
}
export declare class HiFiCommunicator {
    transmitRateLimitTimeoutMS: number;
    private _timers;
    private _inputAudioMediaStream;
    private _currentHiFiAudioAPIData;
    private _lastTransmittedHiFiAudioAPIData;
    private _userDataSubscriptions;
    onUsersDisconnected: Function;
    private _mixerSession;
    private _webRTCSessionParams?;
    constructor({ initialHiFiAudioAPIData, onConnectionStateChanged, onUsersDisconnected, transmitRateLimitTimeoutMS, userDataStreamingScope, hiFiAxisConfiguration, webrtcSessionParams }?: {
        initialHiFiAudioAPIData?: HiFiAudioAPIData;
        onConnectionStateChanged?: Function;
        onUsersDisconnected?: Function;
        transmitRateLimitTimeoutMS?: number;
        userDataStreamingScope?: HiFiUserDataStreamingScopes;
        hiFiAxisConfiguration?: HiFiAxisConfiguration;
        webrtcSessionParams?: WebRTCSessionParams;
    });
    connectToHiFiAudioAPIServer(count: number, hifiAuthJWT: string, signalingHostURL?: string, signalingPort?: number): Promise<any>;
    setOtherUserGainForThisConnection(visitIdHash: string, gain: number): Promise<SetOtherUserGainForThisConnectionResponse>;
    setOtherUserGainsForThisConnection(otherUserGainMap: OtherUserGainMap): Promise<SetOtherUserGainsForThisConnectionResponse>;
    disconnectFromHiFiAudioAPIServer(): Promise<string>;
    getOutputAudioMediaStream(): MediaStream;
    setInputAudioMediaStream(newInputAudioMediaStream: MediaStream, isStereo?: boolean): Promise<boolean>;
    setInputAudioMuted(isMuted: boolean): Promise<boolean>;
    getCommunicatorInfo(): any;
    startCollectingWebRTCStats(callback: Function): void;
    stopCollectingWebRTCStats(): void;
    private _updateUserData;
    private _maybeClearRateLimitTimeout;
    private _updateLastTransmittedHiFiAudioAPIData;
    private _transmitHiFiAudioAPIDataToServer;
    private _cleanUpHiFiAudioAPIDataHistory;
    updateUserDataAndTransmit(newUserData: any): string;
    private _handleUserDataUpdates;
    private _onUsersDisconnected;
    addUserDataSubscription(newSubscription: UserDataSubscription): void;
}
