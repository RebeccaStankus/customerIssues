export declare class Point3D {
    x: number;
    y: number;
    z: number;
    constructor({ x, y, z }?: {
        x?: number;
        y?: number;
        z?: number;
    });
}
export declare class OrientationQuat3D {
    w: number;
    x: number;
    y: number;
    z: number;
    constructor({ w, x, y, z }?: {
        w?: number;
        x?: number;
        y?: number;
        z?: number;
    });
}
export declare class OrientationEuler3D {
    pitchDegrees: number;
    yawDegrees: number;
    rollDegrees: number;
    constructor({ pitchDegrees, yawDegrees, rollDegrees }?: {
        pitchDegrees?: number;
        yawDegrees?: number;
        rollDegrees?: number;
    });
}
export declare enum OrientationEuler3DOrder {
    PitchYawRoll = "PitchYawRoll",
    YawPitchRoll = "YawPitchRoll",
    RollPitchYaw = "RollPitchYaw",
    RollYawPitch = "RollYawPitch",
    YawRollPitch = "YawRollPitch",
    PitchRollYaw = "PitchRollYaw"
}
export declare function eulerToQuaternion(euler: OrientationEuler3D, order: OrientationEuler3DOrder): OrientationQuat3D;
export declare function eulerFromQuaternion(quat: OrientationQuat3D, order: OrientationEuler3DOrder): OrientationEuler3D;
export declare type OtherUserGainMap = {
    [key: string]: number;
};
export declare class HiFiAudioAPIData {
    position: Point3D;
    orientationQuat: OrientationQuat3D;
    orientationEuler: OrientationEuler3D;
    volumeThreshold: number;
    hiFiGain: number;
    userAttenuation: number;
    userRolloff: number;
    _otherUserGainQueue: OtherUserGainMap;
    constructor({ position, orientationQuat, orientationEuler, volumeThreshold, hiFiGain, userAttenuation, userRolloff }?: {
        position?: Point3D;
        orientationQuat?: OrientationQuat3D;
        orientationEuler?: OrientationEuler3D;
        volumeThreshold?: number;
        hiFiGain?: number;
        userAttenuation?: number;
        userRolloff?: number;
    });
}
export declare class ReceivedHiFiAudioAPIData extends HiFiAudioAPIData {
    providedUserID: string;
    hashedVisitID: string;
    volumeDecibels: number;
    isStereo: boolean;
    constructor(params?: {
        providedUserID?: string;
        hashedVisitID?: string;
        volumeDecibels?: number;
        position?: Point3D;
        orientationQuat?: OrientationQuat3D;
        hiFiGain?: number;
        isStereo?: boolean;
    });
}
