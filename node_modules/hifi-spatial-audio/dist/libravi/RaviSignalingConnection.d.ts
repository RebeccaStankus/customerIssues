export declare enum RaviSignalingStates {
    CONNECTING = "connecting",
    OPEN = "open",
    ERROR = "error",
    CLOSING = "closing",
    CLOSED = "closed",
    UNAVAILABLE = "unavailable"
}
export declare class RaviSignalingConnection {
    _stateChangeHandlers: Set<Function>;
    _messageHandlers: Set<Function>;
    _state: RaviSignalingStates;
    _signalingImplementation: RaviSignalingWebSocketImplementation;
    constructor();
    getState(): RaviSignalingStates;
    addStateChangeHandler(changeHandler: Function): boolean;
    removeStateChangeHandler(changeHandler: Function): boolean;
    addMessageHandler(messageHandler: Function): boolean;
    removeMessageHandler(messageHandler: Function): boolean;
    openRAVISignalingConnection(URL: string): Promise<unknown>;
    send(message: string): void;
    closeRAVISignalingConnection(): Promise<unknown>;
    _handleStateChange(event: any, state: any): void;
    _handleMessage(message: any): void;
}
declare class RaviSignalingWebSocketImplementation {
    _raviSignalingConnection: RaviSignalingConnection;
    _webSocket: any;
    constructor(raviSignalingConnection: RaviSignalingConnection);
    _open(socketAddress: string): void;
    _send(message: any): void;
    _close(): void;
}
export {};
