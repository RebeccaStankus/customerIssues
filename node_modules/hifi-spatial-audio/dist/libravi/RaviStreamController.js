import { RaviUtils } from "./RaviUtils";
export class RaviStreamController {
    constructor(raviCommandController) {
        RaviUtils.log("constructor", "RaviStreamController");
        this._commandController = raviCommandController;
        this._audioStream = null;
        this._videoStream = null;
        this._onVideoStreamStateChanged = function (state) { RaviUtils.log("onvideostreamstatechanged " + state, "RaviStreamController"); };
        this._onInputAudioChanged = null;
        this._onInputVideoChanged = null;
    }
    getVideoStream() {
        return this._videoStream;
    }
    _setVideoStream(videoStream) {
        this._videoStream = videoStream;
        if (this._videoContainer) {
            this._videoContainer.srcObject = this._videoStream;
        }
    }
    setVideoContainer(videoElement, onvideostreamstatechanged) {
        this._videoContainer = videoElement;
        if (this._videoStream) {
            this._videoContainer.srcObject = this._videoStream;
        }
        this.setVideoStateChangeHandler(onvideostreamstatechanged);
    }
    setVideoStateChangeHandler(onvideostreamstatechanged) {
        if (onvideostreamstatechanged) {
            this._onVideoStreamStateChanged = onvideostreamstatechanged;
        }
    }
    showVideoDashboard(enabled) {
        this._commandController.queueCommand("video.showDashboard", { "enabled": enabled }, null);
    }
    showVideoCursor(enabled) {
        this._commandController.queueCommand("video.showCursor", { "enabled": enabled }, null);
    }
    getAudioStream() {
        return this._audioStream;
    }
    _setAudioStream(audioStream) {
        this._audioStream = audioStream;
        if (this._audioContainer) {
            this._audioContainer.srcObject = this._audioStream;
        }
    }
    setAudioContainer(audioElement) {
        this._audioContainer = audioElement;
        if (this._audioStream) {
            this._audioContainer.srcObject = this._audioStream;
        }
    }
    setInputAudio(stream, isStereo = false) {
        this._inputAudioStream = stream;
        this._isStereo = isStereo;
        if (this._onInputAudioChanged)
            this._onInputAudioChanged(stream);
    }
    setInputAudioChangeHandler(oninputaudiochanged) {
        if (oninputaudiochanged) {
            this._onInputAudioChanged = oninputaudiochanged;
        }
    }
    setInputVideo(stream) {
        this._inputVideoStream = stream;
        if (this._onInputVideoChanged)
            this._onInputVideoChanged(stream);
    }
    setInputVideoChangeHandler(oninputvideochanged) {
        if (oninputvideochanged) {
            this._onInputVideoChanged = oninputvideochanged;
        }
    }
    isStereoInput() {
        return this._isStereo;
    }
    _stop() {
        RaviUtils.log("stopping streams", "RaviStreamController");
        if (this._videoContainer && this._videoContainer.srcObject) {
            let srcObject = this._videoContainer.srcObject;
            let tracks = srcObject.getTracks();
            tracks.forEach(track => track.stop());
            this._videoContainer.srcObject = null;
            this._onVideoStreamStateChanged("over");
        }
        if (this._audioStream) {
            this._audioStream.getTracks().forEach(track => track.stop());
            this._audioStream = null;
        }
    }
}
//# sourceMappingURL=RaviStreamController.js.map