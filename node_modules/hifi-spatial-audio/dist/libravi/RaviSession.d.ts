import { RaviSignalingConnection } from './RaviSignalingConnection';
import { RaviStreamController } from './RaviStreamController';
import { RaviCommandController } from './RaviCommandController';
export interface WebRTCSessionParams {
    audioMinJitterBufferDuration?: number;
    audioMaxJitterBufferDuration?: number;
}
export declare enum RaviSessionStates {
    NEW = "new",
    CONNECTING = "checking",
    CONNECTED = "connected",
    COMPLETED = "completed",
    DISCONNECTED = "disconnected",
    FAILED = "failed",
    CLOSED = "closed"
}
export declare class RaviSession {
    _stateChangeHandlers: Set<Function>;
    _uuid: string;
    _commandController: RaviCommandController;
    _streamController: RaviStreamController;
    _state: RaviSessionStates;
    _raviImplementation: RaviWebRTCImplementation;
    constructor();
    getState(): RaviSessionStates;
    getUUID(): string;
    addStateChangeHandler(changeHandler: Function): boolean;
    removeStateChangeHandler(changeHandler: Function): boolean;
    getCommandController(): RaviCommandController;
    getStreamController(): RaviStreamController;
    openRAVISession(count: number, { signalingConnection, timeout, params }: {
        signalingConnection: RaviSignalingConnection;
        timeout?: number;
        params?: WebRTCSessionParams;
    }): Promise<unknown>;
    closeRAVISession(): Promise<unknown>;
    _doOntrack(event: any): void;
    _doOndatachannel(event: any): void;
    _handleStateChange(event: any, state: any): void;
    addStatsObserver(observer: Function): boolean;
    removeStatsObserver(observer: Function): boolean;
}
declare class RaviWebRTCStatsWatcher {
    _raviImplementation: RaviWebRTCImplementation;
    _observers: Set<Function>;
    _filter: Map<string, Array<any>>;
    _interval: number;
    _prevStats: Array<any>;
    constructor(webRTCImplementation: RaviWebRTCImplementation);
    stop(): void;
    addObserver(observer: Function): boolean;
    removeObserver(observer: Function): boolean;
    _onObserverChange(): void;
}
declare let crossPlatformRTCPeerConnection: any;
declare class RaviWebRTCImplementation {
    _raviSession: RaviSession;
    _negotiator: any;
    _statsWatcher: RaviWebRTCStatsWatcher;
    _rtcConnection: typeof crossPlatformRTCPeerConnection;
    _raviAudioSenders: any;
    _raviVideoSenders: any;
    _signalingConnection: RaviSignalingConnection;
    constructor(raviSession: RaviSession);
    _initRtcConnection(): void;
    _assignSignalingConnection(signalingConnection: RaviSignalingConnection): void;
    _addAudioInputStream(stream: MediaStream): boolean;
    _addVideoInputStream(stream: MediaStream): boolean;
    _open(params: any): void;
    _close(): void;
    _doOnicecandidate(event: any): void;
    _doOnnegotiationneeded(event: any): void;
    _doOnsignalingstatechanged(event: any): void;
    _forceBitrateUp(sdp: string): string;
    _forceStereoDown(sdp: string): string;
    _setupConnection(event: any): void;
    _addStatsObserver(observer: Function): boolean;
    _removeStatsObserver(observer: Function): boolean;
    _getStats(selector?: any): Promise<any>;
}
export { };
