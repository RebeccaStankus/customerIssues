import { RaviUtils } from "./RaviUtils";
export var RaviSignalingStates;
(function (RaviSignalingStates) {
    RaviSignalingStates["CONNECTING"] = "connecting";
    RaviSignalingStates["OPEN"] = "open";
    RaviSignalingStates["ERROR"] = "error";
    RaviSignalingStates["CLOSING"] = "closing";
    RaviSignalingStates["CLOSED"] = "closed";
    RaviSignalingStates["UNAVAILABLE"] = "unavailable";
})(RaviSignalingStates || (RaviSignalingStates = {}));
;
export class RaviSignalingConnection {
    constructor() {
        RaviUtils.log("Constructor", "RaviSignalingConnection");
        this._stateChangeHandlers = new Set();
        this._messageHandlers = new Set();
        this._state = RaviSignalingStates.CLOSED;
        this._signalingImplementation = new RaviSignalingWebSocketImplementation(this);
    }
    getState() {
        return this._state;
    }
    addStateChangeHandler(changeHandler) {
        try {
            this._stateChangeHandlers.add(changeHandler);
            return true;
        }
        catch (err) {
            RaviUtils.err("Error adding a state change handler: " +
                err.message, "RaviSignalingConnection");
            return false;
        }
        return false;
    }
    removeStateChangeHandler(changeHandler) {
        try {
            this._stateChangeHandlers.delete(changeHandler);
            return true;
        }
        catch (err) {
            RaviUtils.err("Error removing a state change handler: " +
                err.message, "RaviSignalingConnection");
            return false;
        }
        return false;
    }
    addMessageHandler(messageHandler) {
        try {
            this._messageHandlers.add(messageHandler);
            return true;
        }
        catch (err) {
            RaviUtils.err("Error adding a message handler: " +
                err.message, "RaviSignalingConnection");
            return false;
        }
        return false;
    }
    removeMessageHandler(messageHandler) {
        try {
            this._messageHandlers.delete(messageHandler);
            return true;
        }
        catch (err) {
            RaviUtils.err("Error removing a state change handler: " +
                err.message, "RaviSignalingConnection");
            return false;
        }
        return false;
    }
    openRAVISignalingConnection(URL) {
        var signalingConnection = this;
        return new Promise((resolve, reject) => {
            RaviUtils.log("Opening signaling connection to " + URL, "RaviSignalingController");
            const stateHandler = function (event) {
                console.log("______________openRAVISignalingConnection_________________ ravi event state: ", event.state);
                var state = "";
                if (event && event.state)
                    state = event.state;
                if (state === RaviSignalingStates.CONNECTING) {
                    RaviUtils.log("Connecting...", "RaviSignalingController");
                }
                else if (state === RaviSignalingStates.OPEN) {
                    signalingConnection.removeStateChangeHandler(stateHandler);
                    resolve(state);
                }
                else {
                    signalingConnection.removeStateChangeHandler(stateHandler);
                    reject(event.error || new Error(event.message || state));
                }
            };
            signalingConnection.addStateChangeHandler(stateHandler);
            var event = { "state": RaviSignalingStates.CONNECTING };
            this._handleStateChange(event, RaviSignalingStates.CONNECTING);
            this._signalingImplementation._open(URL);
        });
    }
    send(message) {
        this._signalingImplementation._send(message);
    }
    closeRAVISignalingConnection() {
        var signalingConnection = this;
        return new Promise((resolve, reject) => {
            RaviUtils.log("Closing signaling connection", "RaviSignalingConnection");
            const stateHandler = function (event) {
                var state = "";
                console.log("______________closeRAVISignalingConnection_________________ ravi event state: ", event.state);
                if (event && event.state)
                    state = event.state;
                if (state === RaviSignalingStates.CLOSING) {
                    RaviUtils.log("Closing...", "RaviSignalingConnection");
                }
                else if (state === RaviSignalingStates.CLOSED) {
                    signalingConnection.removeStateChangeHandler(stateHandler);
                    resolve(state);
                }
                else {
                    signalingConnection.removeStateChangeHandler(stateHandler);
                    reject(Error(state));
                }
            };
            signalingConnection.addStateChangeHandler(stateHandler);
            var event = { "state": RaviSignalingStates.CLOSING };
            this._handleStateChange(event, RaviSignalingStates.CLOSING);
            this._signalingImplementation._close();
        });
    }
    _handleStateChange(event, state) {
        this._state = state;
        event["state"] = state;
        RaviUtils.log("_handleStateChange: " + RaviUtils.safelyPrintable(event), "RaviSignalingConnection");
        this._stateChangeHandlers.forEach(function (handler) {
            if (handler) {
                handler(event);
            }
        });
    }
    _handleMessage(message) {
        RaviUtils.log("_doOnmessage: " + RaviUtils.safelyPrintable(message), "RaviSignalingConnection");
        if (message.data) {
            try {
                let messageData = JSON.parse(message.data);
                if (messageData.error && messageData.error == "service-unavailable") {
                    this._handleStateChange({}, RaviSignalingStates.UNAVAILABLE);
                }
            }
            catch (err) {
            }
        }
        this._messageHandlers.forEach(function (handler) {
            if (handler) {
                handler(message);
            }
        });
    }
}
let crossPlatformWebSocket = null;
if (typeof self === 'undefined') {
    crossPlatformWebSocket = require('ws');
}
else {
    crossPlatformWebSocket = WebSocket;
}
class RaviSignalingWebSocketImplementation {
    constructor(raviSignalingConnection) {
        RaviUtils.log("constructor", "RaviSignalingWebSocketImplementation");
        this._raviSignalingConnection = raviSignalingConnection;
    }
    _open(socketAddress) {
        this._webSocket = new crossPlatformWebSocket(socketAddress);
        var signalingConnection = this._raviSignalingConnection;
        this._webSocket.addEventListener('open', function (event) { signalingConnection._handleStateChange(event, RaviSignalingStates.OPEN); });
        this._webSocket.addEventListener('error', function (event) { signalingConnection._handleStateChange(event, RaviSignalingStates.ERROR); });
        this._webSocket.addEventListener('close', function (event) { signalingConnection._handleStateChange(event, RaviSignalingStates.CLOSED); });
        this._webSocket.addEventListener('message', function (event) { signalingConnection._handleMessage(event); });
    }
    _send(message) {
        if (this._webSocket && this._webSocket.readyState === crossPlatformWebSocket.OPEN) {
            RaviUtils.log("Sending message to server: " + message, "RaviSignalingWebSocketImplementation");
            this._webSocket.send(message);
        }
    }
    _close() {
        if (this._webSocket) {
            this._webSocket.close();
            this._webSocket = null;
        }
    }
}
//# sourceMappingURL=RaviSignalingConnection.js.map