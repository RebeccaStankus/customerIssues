export declare class RaviCommandController {
    _commandQueueMap: Map<string, any>;
    _numQueuedCommands: number;
    _commandQueueInterval: number;
    _commandPumpTimer: ReturnType<typeof setInterval>;
    _inputTarget: HTMLElement;
    _keyboardTarget: HTMLElement;
    _mouseStateBuffer: ArrayBuffer;
    _mouseStateUint8: Uint8Array;
    _mouseStateFloat: Float32Array;
    _keyboardStateBuffer: ArrayBuffer;
    _keyboardState: Uint8Array;
    _inputDataChannel: RTCDataChannel;
    _commandDataChannel: RTCDataChannel;
    constructor();
    setCommandQueueInterval(queueInterval: number): void;
    queueCommand(command: string, param: any, handler: Function): void;
    queueBinaryCommand(message: ArrayBuffer): void;
    addMessageHandler(expectedMessage: string, handler: Function, isSticky: boolean): void;
    addBinaryHandler(handler: Function, isSticky: boolean): void;
    sendInput(inputEvent: any): void;
    monitorQueues(): void;
    stopMonitoringQueues(): void;
    _processSendingQueuedCommands(): void;
    _serializeJsonCommandMessageToSend(command: string, payload: string): string;
    _unserializeJsonCommandMessageFromReceived(message: string): {
        command: any;
        payload: any;
    };
    _sendCommandInstance(commandInstance: RaviCommandInstance): boolean;
    _processListeningCommand(fromServerMessage: any): void;
    _continueProcessingListeningCommand(commandMessage: any): void;
    _setInputDataChannel(inputDataChannel: RTCDataChannel): void;
    _setCommandDataChannel(commandDataChannel: RTCDataChannel): void;
    setInputTarget(inputTargetElement: HTMLElement): void;
    setKeyboardTarget(inputTargetElement: HTMLElement): void;
    _captureMouseDown(e: MouseEvent): void;
    _resetMouseDown(e: MouseEvent): void;
    _trackMouse(e: MouseEvent): void;
    _wheelMouse(e: WheelEvent): void;
    _sendMouseState(): void;
    _keyByteNum(c: any): number;
    _keyBitMask(c: any): number;
    _onKeyboardDown(e: KeyboardEvent): void;
    _onKeyboardUp(e: KeyboardEvent): void;
    _sendKeyboardState(): void;
}
declare class RaviCommandInstance {
    _command: any;
    _param: any;
    _handler: any;
    constructor(command: any, param: any, handler: any);
}
export {};
